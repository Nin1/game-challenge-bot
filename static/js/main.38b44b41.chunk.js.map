{"version":3,"sources":["components/editableStringList.jsx","components/segmentList.jsx","components/gameList.jsx","components/sentenceGenerator.js","components/gameChallengeApp.jsx","index.js"],"names":["EditableStringList","s","onStringChange","onStringDelete","key","id","InputGroup","className","Form","Control","defaultValue","text","aria-label","aria-describedby","onChange","e","Append","Button","variant","onClick","strings","Fragment","map","renderExistingString","this","props","onAddButton","renderStrings","Component","SegmentList","state","handleDeleteCategory","activeId","categories","onDeleteCategory","length","find","c","isInherited","activeCategoryName","activeCategoryId","onEditCategory","onSwitchCategory","categoryIsInherited","formControl","value","readOnly","DropdownButton","title","Dropdown","Item","href","name","onAddSegment","onEditSegment","onDeleteSegment","onAddCategory","activeCategory","activeCategoryStrings","renderDropdown","sId","GameList","games","activeGameName","activeGameId","onEditGame","onSwitchGame","g","onAddGame","onDeleteGame","activeGame","actualGameId","actualGameName","actualGameCategories","segments","cId","randomTimeString","hours","Math","floor","random","minutes","seconds","time","buildSentence","sentence","output","slice","includes","start","indexOf","end","substring","options","split","segment","segList","hasSegment","splice","generateSentence","sentences","generics","sentenceList","game","i","j","push","GameChallengeApp","activeGenericCategoryId","activeGameCategoryId","generatedSentences","inheritAllGenericsForAllGames","usedIDs","forEach","cat","alreadyExists","gCat","inheritedID","gameCatId","findFirstUniqueID","setState","handleSave","firebase","ref","set","handleGenerate","console","log","handleAddSentence","handleSentenceChange","stringId","event","index","findIndex","target","handleSentenceDelete","filter","handleAddGenericCategory","newCategoryId","newSegmentId","handleEditGenericCategory","categoryId","categoryIndex","handleDeleteGenericCategory","handleSwitchGenericCategory","handleAddGenericSegment","handleDeleteGenericSegment","segmentId","newStrings","handleEditGenericSegment","category","handleAddGame","newGameId","handleEditGame","gameId","gameIndex","handleDeleteGame","handleSwitchGame","handleAddGameCategory","handleEditGameCategory","handleDeleteGameCategory","handleSwitchGameCategory","handleAddGameSegment","handleDeleteGameSegment","handleEditGameSegment","reservedIDs","objects","t","startId","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","rootRef","child","once","then","snap","val","forceUpdate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38b44b41.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\n\r\n// Displays a list of strings.\r\n// Each string has an 'x' button to remove it.\r\n// An ADD button at the bottom allows you to add to the list.\r\nclass EditableStringList extends Component {\r\n  renderExistingString(s, onStringChange, onStringDelete) {\r\n    return (\r\n      <div key={s.id}>\r\n        <InputGroup className=\"mb-3\">\r\n          <Form.Control\r\n            defaultValue={s.text}\r\n            aria-label=\"String\"\r\n            aria-describedby=\"basic-addon2\"\r\n            onChange={e => onStringChange(s.id, e)}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button\r\n              variant=\"outline-secondary\"\r\n              onClick={e => onStringDelete(s.id)}\r\n            >\r\n              X\r\n            </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderStrings(strings, onStringChange, onStringDelete) {\r\n    if (strings != null) {\r\n      return (\r\n        <React.Fragment>\r\n          {strings.map(s => {\r\n            return this.renderExistingString(s, onStringChange, onStringDelete);\r\n          })}\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { strings, onAddButton, onStringChange, onStringDelete } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        {this.renderStrings(strings, onStringChange, onStringDelete)}\r\n        <br />\r\n        <button\r\n          onClick={() => onAddButton()}\r\n          className=\"btn btn-danger btn-sm m 2\"\r\n        >\r\n          Add\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableStringList;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport EditableStringList from \"./editableStringList\";\r\n\r\nclass SegmentList extends Component {\r\n  state = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  /*\r\n  handleAddCategory = onAddCategory => {\r\n    this.setState({ activeCategoryId: onAddCategory() });\r\n  };\r\n\r\n  handleSwitchCategory = newCategoryId => {\r\n    this.setState({ activeCategoryId: newCategoryId });\r\n  };*/\r\n\r\n  handleDeleteCategory = (activeId, categories, onDeleteCategory) => {\r\n    // Can't delete last category\r\n    if (categories.length === 1) return;\r\n    // Can't delete inherited category\r\n    if (\r\n      categories.find(c => {\r\n        return c.id === activeId;\r\n      }).isInherited\r\n    )\r\n      return;\r\n    onDeleteCategory(activeId);\r\n  };\r\n\r\n  renderDropdown(\r\n    categories,\r\n    activeCategoryName,\r\n    activeCategoryId,\r\n    onEditCategory,\r\n    onSwitchCategory,\r\n    categoryIsInherited\r\n  ) {\r\n    var formControl = (\r\n      <Form.Control\r\n        value={activeCategoryName}\r\n        aria-label=\"String\"\r\n        aria-describedby=\"basic-addon2\"\r\n        onChange={e => onEditCategory(activeCategoryId, e)}\r\n      />\r\n    );\r\n    if (categoryIsInherited) {\r\n      formControl = (\r\n        <Form.Control\r\n          readOnly\r\n          value={\"(Generic) \" + activeCategoryName}\r\n          aria-label=\"String\"\r\n          aria-describedby=\"basic-addon2\"\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <DropdownButton id=\"dropdown-basic-button\" title={activeCategoryName}>\r\n        {formControl}\r\n        {categories.map(c => {\r\n          return (\r\n            <Dropdown.Item\r\n              href=\"#/action-1\"\r\n              key={c.id}\r\n              onClick={() => onSwitchCategory(c.id)}\r\n            >\r\n              {c.isInherited ? \"(Generic) \" + c.name : c.name}\r\n            </Dropdown.Item>\r\n          );\r\n        })}\r\n      </DropdownButton>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      activeId,\r\n      categories,\r\n      onAddSegment,\r\n      onEditSegment,\r\n      onDeleteSegment,\r\n      onAddCategory,\r\n      onEditCategory,\r\n      onDeleteCategory,\r\n      onSwitchCategory\r\n    } = this.props;\r\n    // Dropdown of categories\r\n    // Add category button\r\n    // Remove category button\r\n    // Category edit field name (readOnly if inherited from generics)\r\n    // Editable string list\r\n    var activeCategory = categories.find(c => {\r\n      return c.id === activeId;\r\n    });\r\n    // Need to be able to handle null case\r\n    var activeCategoryId = -1;\r\n    var activeCategoryName = \"<Missing>\";\r\n    var activeCategoryStrings = [];\r\n    var categoryIsInherited = true;\r\n    if (activeCategory != null) {\r\n      activeCategoryId = activeCategory.id;\r\n      activeCategoryName = activeCategory.name;\r\n      activeCategoryStrings = activeCategory.strings;\r\n      categoryIsInherited = activeCategory.isInherited;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {this.renderDropdown(\r\n          categories,\r\n          activeCategoryName,\r\n          activeCategoryId,\r\n          onEditCategory,\r\n          onSwitchCategory,\r\n          categoryIsInherited\r\n        )}\r\n        <button\r\n          onClick={() => onAddCategory()}\r\n          className=\"btn btn-primary btn-sm m 2\"\r\n        >\r\n          Add Category\r\n        </button>\r\n        <button\r\n          onClick={() => onDeleteCategory(activeId, categories)}\r\n          className=\"btn btn-danger btn-sm m 2\"\r\n        >\r\n          Delete Category\r\n        </button>\r\n        <EditableStringList\r\n          strings={activeCategoryStrings}\r\n          onAddButton={() => onAddSegment(activeCategoryId)}\r\n          onStringChange={(sId, e) => onEditSegment(activeCategoryId, sId, e)}\r\n          onStringDelete={sId => onDeleteSegment(activeCategoryId, sId)}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SegmentList;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport SegmentList from \"./segmentList\";\r\n\r\nclass GameList extends Component {\r\n  state = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  /*\r\n  handleAddGame = onAddGame => {\r\n    this.setState({ activeGameId: onAddGame() });\r\n  };\r\n\r\n  handleSwitchGame = newGameId => {\r\n    this.setState({ activeGameId: newGameId });\r\n  };\r\n\r\n  handleDeleteGame = (gameId, games, onDeleteGame) => {\r\n    // Can't delete last game\r\n    if (games.length === 1) return;\r\n    // Update activeCategoryId\r\n    //let activeGame = games.find(g => {\r\n    //  return g.id !== this.state.activeGameId;\r\n    //});\r\n    //this.setState({ activeGameId: activeGame.id });\r\n    // Delete\r\n    onDeleteGame(gameId);\r\n  };\r\n\r\n  handleDeleteCategory = (gameId, categoryId, onDeleteCategory) => {\r\n    onDeleteCategory(gameId, categoryId);\r\n  };\r\n*/\r\n  renderDropdown(\r\n    games,\r\n    activeGameName,\r\n    activeGameId,\r\n    onEditGame,\r\n    onSwitchGame\r\n  ) {\r\n    return (\r\n      <DropdownButton id=\"dropdown-basic-button\" title={activeGameName}>\r\n        <Form.Control\r\n          value={activeGameName}\r\n          aria-label=\"String\"\r\n          aria-describedby=\"basic-addon2\"\r\n          onChange={e => onEditGame(activeGameId, e)}\r\n        />\r\n        {games.map(g => {\r\n          return (\r\n            <Dropdown.Item\r\n              href=\"#/action-1\"\r\n              key={g.id}\r\n              onClick={() => onSwitchGame(g.id)}\r\n            >\r\n              {g.name}\r\n            </Dropdown.Item>\r\n          );\r\n        })}\r\n      </DropdownButton>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      activeGameId,\r\n      activeCategoryId,\r\n      games,\r\n      onAddSegment,\r\n      onEditSegment,\r\n      onDeleteSegment,\r\n      onAddCategory,\r\n      onEditCategory,\r\n      onDeleteCategory,\r\n      onSwitchCategory,\r\n      onAddGame,\r\n      onEditGame,\r\n      onDeleteGame,\r\n      onSwitchGame\r\n    } = this.props;\r\n\r\n    var activeGame = games.find(g => {\r\n      return g.id === activeGameId;\r\n    });\r\n    // Need to be able to handle null case\r\n    var actualGameId = -1;\r\n    var actualGameName = \"<Missing>\";\r\n    var actualGameCategories = [];\r\n    if (activeGame != null) {\r\n      actualGameId = activeGame.id;\r\n      actualGameName = activeGame.name;\r\n      actualGameCategories = activeGame.segments;\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {this.renderDropdown(\r\n          games,\r\n          actualGameName,\r\n          actualGameId,\r\n          onEditGame,\r\n          onSwitchGame\r\n        )}\r\n        <button\r\n          onClick={() => onAddGame()}\r\n          className=\"btn btn-primary btn-sm m 2\"\r\n        >\r\n          Add Game\r\n        </button>\r\n        <button\r\n          onClick={() => onDeleteGame(actualGameId)}\r\n          className=\"btn btn-danger btn-sm m 2\"\r\n        >\r\n          Delete Game\r\n        </button>\r\n        <SegmentList\r\n          activeId={activeCategoryId}\r\n          categories={actualGameCategories}\r\n          onAddCategory={cId => onAddCategory(actualGameId, cId)}\r\n          onEditCategory={(cId, e) => onEditCategory(actualGameId, cId, e)}\r\n          onDeleteCategory={cId => onDeleteCategory(actualGameId, cId)}\r\n          onSwitchCategory={cId => onSwitchCategory(cId)}\r\n          onAddSegment={cId => onAddSegment(actualGameId, cId)}\r\n          onEditSegment={(cId, sId, e) =>\r\n            onEditSegment(actualGameId, cId, sId, e)\r\n          }\r\n          onDeleteSegment={(cId, sId) =>\r\n            onDeleteSegment(actualGameId, cId, sId)\r\n          }\r\n          key={actualGameId}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameList;\r\n","import { string } from \"prop-types\";\r\n\r\nfunction randomTimeString() {\r\n  var hours = Math.floor(Math.random() * 3);\r\n  var minutes = Math.floor(Math.random() * 59);\r\n  var seconds = Math.floor(Math.random() * 59);\r\n  var time = \"\";\r\n  if (hours > 0) {\r\n    time += hours + \":\";\r\n  }\r\n  if (minutes < 10) {\r\n    time += \"0\";\r\n  }\r\n  time += minutes + \":\";\r\n  if (seconds < 10) {\r\n    time += \"0\";\r\n  }\r\n  time += seconds;\r\n  return time;\r\n}\r\n\r\nfunction buildSentence(sentence, segments) {\r\n  // Hacky way to copy a string\r\n  var output = (\" \" + sentence).slice(1);\r\n  // Handle any keys we need to replace\r\n  while (output.includes(\"[\")) {\r\n    // Find key from sentence\r\n    var start = output.indexOf(\"[\") + 1;\r\n    var end = output.indexOf(\"]\");\r\n    var key = output.substring(start, end);\r\n\r\n    // A choice of keys can be provided by using /\r\n    if (key.includes(\"/\")) {\r\n      var options = key.split(\"/\");\r\n      var o = Math.floor(Math.random() * options.length);\r\n      key = options[o];\r\n    }\r\n\r\n    var segment = \"\";\r\n\r\n    if (key === \"TIME\") {\r\n      // Special case\r\n      segment = randomTimeString();\r\n    } else {\r\n      // Confirm key exists\r\n      if (!(key in segments)) {\r\n        return \"-1\";\r\n      }\r\n\r\n      const segList = [...segments[key]];\r\n      var hasSegment = false;\r\n      while (!hasSegment) {\r\n        // If there are no segments to build, fail\r\n        if (segList.length == 0) {\r\n          return \"-1\";\r\n        }\r\n\r\n        // Pick a random string from the segment list and built it\r\n        var s = Math.floor(Math.random() * (segList.length - 1));\r\n        segment = buildSentence(segList[s].text, segments);\r\n\r\n        if (segment == \"-1\") {\r\n          segList.splice(s, 1);\r\n        } else {\r\n          hasSegment = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    output =\r\n      output.substring(0, start - 1) + segment + output.substring(end + 1);\r\n  }\r\n  return output;\r\n}\r\n\r\nexport function generateSentence(sentences, generics, games) {\r\n  var sentenceList = [...sentences];\r\n  while (sentenceList.length > 0) {\r\n    // Pick a sentence template\r\n    var s = Math.floor(Math.random() * (sentenceList.length - 1));\r\n    var sentence = sentenceList[s].text;\r\n\r\n    // Pick a game\r\n    var g = Math.floor(Math.random() * (games.length - 1));\r\n    var game = games[g];\r\n\r\n    // Generate a list of all possible segments as a dictionary of arrays of strings\r\n    // e.g. segments[\"action\"] contains all actions from generic and game\r\n    var segments = {};\r\n\r\n    // Generic segments\r\n    for (var i = 0; i < generics.length; ++i) {\r\n      if (!(generics[i].name in segments)) {\r\n        segments[generics[i].name] = [];\r\n      }\r\n      if (\"strings\" in generics[i]) {\r\n        for (var j = 0; j < generics[i][\"strings\"].length; ++j) {\r\n          segments[generics[i].name].push(generics[i][\"strings\"][j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Game-specific segments\r\n    if (\"segments\" in game) {\r\n      for (var i = 0; i < game[\"segments\"].length; ++i) {\r\n        if (!(game[\"segments\"][i].name in segments)) {\r\n          segments[game[\"segments\"][i].name] = [];\r\n        }\r\n        if (\"strings\" in game[\"segments\"][i]) {\r\n          for (var j = 0; j < game[\"segments\"][i][\"strings\"].length; ++j) {\r\n            segments[game[\"segments\"][i].name].push(\r\n              game[\"segments\"][i][\"strings\"][j]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    segments[\"game\"] = [{ text: game.name }];\r\n\r\n    var output = buildSentence(sentence, segments);\r\n    if (output != \"-1\") {\r\n      return output;\r\n    }\r\n\r\n    // Failed to generate this sentence; try another\r\n    sentenceList.splice(s, 1);\r\n  }\r\n  return \"Error generating sentence\";\r\n}\r\n","import React, { Component } from \"react\";\r\nimport * as firebase from \"firebase\";\r\nimport EditableStringList from \"./editableStringList\";\r\nimport SegmentList from \"./segmentList\";\r\nimport GameList from \"./gameList\";\r\nimport { generateSentence } from \"./sentenceGenerator\";\r\n\r\nclass GameChallengeApp extends Component {\r\n  state = {\r\n    activeGenericCategoryId: 0,\r\n    activeGameId: 0,\r\n    activeGameCategoryId: 0,\r\n\r\n    sentences: [],\r\n    generics: [],\r\n    games: [],\r\n\r\n    generatedSentences: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Load from database\r\n    const firebaseConfig = {\r\n      apiKey: \"AIzaSyBOzIDUIUFpvYf-pZZFY7I9Ucb4nXEKyC4\",\r\n      authDomain: \"game-challenge-bot.firebaseapp.com\",\r\n      databaseURL: \"https://game-challenge-bot.firebaseio.com\",\r\n      projectId: \"game-challenge-bot\",\r\n      storageBucket: \"game-challenge-bot.appspot.com\",\r\n      messagingSenderId: \"1047706421956\",\r\n      appId: \"1:1047706421956:web:26b78b0b0b9630ba6a1791\",\r\n      measurementId: \"G-LX0HVNR863\"\r\n    };\r\n    firebase.initializeApp(firebaseConfig);\r\n    const rootRef = firebase\r\n      .database()\r\n      .ref()\r\n      .child(\"/\");\r\n    const sentenceRef = rootRef.child(\"sentences\");\r\n    sentenceRef.once(\"value\").then(snap => {\r\n      this.setState({ sentences: snap.val() });\r\n      this.forceUpdate();\r\n    });\r\n    const genericsRef = rootRef.child(\"generics\");\r\n    genericsRef.once(\"value\").then(snap => {\r\n      var generics = snap.val();\r\n      generics.forEach(cat => {\r\n        if (cat.strings == null) {\r\n          cat.strings = [];\r\n        }\r\n      });\r\n      this.setState({ generics });\r\n      this.setState({ activeGenericCategoryId: this.state.generics[0].id });\r\n      this.inheritAllGenericsForAllGames();\r\n      this.forceUpdate();\r\n    });\r\n    const gamesRef = rootRef.child(\"games\");\r\n    gamesRef.once(\"value\").then(snap => {\r\n      var games = snap.val();\r\n      games.forEach(game => {\r\n        if (game.segments == null) {\r\n          game.segments = [];\r\n        }\r\n        game.segments.forEach(cat => {\r\n          if (cat.strings == null) {\r\n            cat.strings = [];\r\n          }\r\n        });\r\n      });\r\n      this.setState({ games });\r\n      this.setState({ activeGameId: this.state.games[0].id });\r\n      this.setState({\r\n        activeGameCategoryId: this.state.games[0].segments[0].id\r\n      });\r\n      this.inheritAllGenericsForAllGames();\r\n      this.forceUpdate();\r\n    });\r\n  }\r\n\r\n  inheritAllGenericsForAllGames = () => {\r\n    const games = [...this.state.games];\r\n    // Make sure each game is inheriting generics\r\n    var usedIDs = [];\r\n    this.state.generics.forEach(cat => {\r\n      games.forEach(game => {\r\n        var alreadyExists = false;\r\n        game.segments.forEach(gCat => {\r\n          if (cat.name == gCat.name) {\r\n            gCat.isInherited = true;\r\n            gCat.inheritedID = cat.id;\r\n            alreadyExists = true;\r\n          }\r\n        });\r\n        if (!alreadyExists) {\r\n          var gameCatId = this.findFirstUniqueID(usedIDs);\r\n          usedIDs.push(gameCatId);\r\n          game.segments.push({\r\n            id: gameCatId,\r\n            isInherited: true,\r\n            inheritedID: cat.id,\r\n            name: cat.name,\r\n            strings: []\r\n          });\r\n        }\r\n      });\r\n    });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleSave = () => {\r\n    firebase\r\n      .database()\r\n      .ref(\"sentences/\")\r\n      .set(this.state.sentences);\r\n    firebase\r\n      .database()\r\n      .ref(\"generics/\")\r\n      .set(this.state.generics);\r\n    firebase\r\n      .database()\r\n      .ref(\"games/\")\r\n      .set(this.state.games);\r\n  };\r\n\r\n  handleGenerate = () => {\r\n    var generatedSentences = [];\r\n    for (var i = 0; i < 5; ++i) {\r\n      generatedSentences.push({\r\n        id: i,\r\n        text: generateSentence(\r\n          this.state.sentences,\r\n          this.state.generics,\r\n          this.state.games\r\n        )\r\n      });\r\n    }\r\n    console.log(generatedSentences);\r\n    this.setState({ generatedSentences });\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Sentence events\r\n   *\r\n   */\r\n\r\n  // Adds a new empty sentence to the list of sentences\r\n  handleAddSentence = () => {\r\n    console.log(\"Adding new sentence\");\r\n    // Create copy of sentences array for local modification\r\n    const sentences = [...this.state.sentences];\r\n    sentences.push({ id: this.findFirstUniqueID(), text: \"\" });\r\n    // Update state\r\n    this.setState({ sentences });\r\n  };\r\n\r\n  // Updates a sentence whenever its input field is changed\r\n  handleSentenceChange = (stringId, event) => {\r\n    const sentences = [...this.state.sentences];\r\n    const index = sentences.findIndex(s => {\r\n      return s.id === stringId;\r\n    });\r\n    sentences[index].text = event.target.value;\r\n    this.setState({ sentences });\r\n    console.log(\"Edited sentence \" + stringId + \": \" + sentences[index].text);\r\n  };\r\n\r\n  // Deletes a sentence whenever its delete button is pressed\r\n  handleSentenceDelete = stringId => {\r\n    console.log(\"Delete called on sentence \" + stringId);\r\n    const sentences = this.state.sentences.filter(s => s.id !== stringId);\r\n    this.setState({ sentences });\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Generics events\r\n   *\r\n   */\r\n\r\n  handleAddGenericCategory = () => {\r\n    const generics = [...this.state.generics];\r\n    var newCategoryId = this.findFirstUniqueID();\r\n    var newSegmentId = this.findFirstUniqueID([newCategoryId]);\r\n    generics.push({\r\n      id: newCategoryId,\r\n      name: \"New Category\",\r\n      strings: [{ id: newSegmentId, text: \"\" }]\r\n    });\r\n    this.setState({ generics });\r\n    this.setState({ activeGenericCategoryId: newCategoryId });\r\n    // Add this category to every game\r\n    const games = [...this.state.games];\r\n    var usedIDs = [newCategoryId, newSegmentId];\r\n    games.forEach(game => {\r\n      var gameCatId = this.findFirstUniqueID(usedIDs);\r\n      usedIDs.push(gameCatId);\r\n      game.segments.push({\r\n        id: gameCatId,\r\n        isInherited: true,\r\n        inheritedID: newCategoryId,\r\n        name: \"New Category\",\r\n        strings: []\r\n      });\r\n    });\r\n    this.setState({ games });\r\n    // Return category ID\r\n    return newCategoryId;\r\n  };\r\n\r\n  handleEditGenericCategory = (categoryId, event) => {\r\n    const categoryIndex = this.state.generics.findIndex(c => {\r\n      return c.id === categoryId;\r\n    });\r\n    let generics = this.state.generics;\r\n    generics[categoryIndex].name = event.target.value;\r\n    this.setState({ generics });\r\n    // Update name for all games too\r\n    const games = [...this.state.games];\r\n    games.forEach(game => {\r\n      game.segments.find(c => {\r\n        return c.isInherited && c.inheritedID === categoryId;\r\n      }).name = event.target.value;\r\n    });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleDeleteGenericCategory = categoryId => {\r\n    const generics = this.state.generics.filter(c => c.id !== categoryId);\r\n    this.setState({ activeGenericCategoryId: generics[0].id });\r\n    this.setState({ generics });\r\n    // Delete this category from any games, unless they have custom segments (in which case, set uninherited)\r\n    var games = [...this.state.games];\r\n    games.forEach(game => {\r\n      // Filter out matching empty category\r\n      const categories = game.segments.filter(\r\n        c =>\r\n          !c.isInherited || c.inheritedID !== categoryId || c.strings.length > 0\r\n      );\r\n      game.segments = categories;\r\n      game.segments.forEach(c => {\r\n        // Un-inherit any matching category that has custom strings\r\n        if (\r\n          c.isInherited &&\r\n          c.inheritedID === categoryId &&\r\n          c.strings.length > 0\r\n        ) {\r\n          c.isInherited = false;\r\n          c.inheritedID = -1;\r\n        }\r\n      });\r\n    });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleSwitchGenericCategory = newCategoryId => {\r\n    this.setState({ activeGenericCategoryId: newCategoryId });\r\n  };\r\n\r\n  handleAddGenericSegment = categoryId => {\r\n    const generics = [...this.state.generics];\r\n    const category = {\r\n      ...generics.find(c => {\r\n        return c.id === categoryId;\r\n      })\r\n    };\r\n    category.strings.push({\r\n      id: this.findFirstUniqueID(),\r\n      text: \"\"\r\n    });\r\n    this.setState({ generics });\r\n  };\r\n\r\n  handleDeleteGenericSegment = (categoryId, segmentId) => {\r\n    const categoryIndex = this.state.generics.findIndex(c => {\r\n      return c.id === categoryId;\r\n    });\r\n    const newStrings = this.state.generics[categoryIndex].strings.filter(\r\n      s => s.id !== segmentId\r\n    );\r\n    let generics = this.state.generics;\r\n    generics[categoryIndex].strings = newStrings;\r\n    this.setState({ generics });\r\n  };\r\n\r\n  // Updates a segment from the generic list whenever its input field is changed\r\n  handleEditGenericSegment = (categoryId, stringId, event) => {\r\n    const generics = [...this.state.generics];\r\n    const category = {\r\n      ...generics.find(c => {\r\n        return c.id === categoryId;\r\n      })\r\n    };\r\n    const index = category.strings.findIndex(s => {\r\n      return s.id === stringId;\r\n    });\r\n    category.strings[index].text = event.target.value;\r\n    this.setState({ generics });\r\n    console.log(\r\n      \"Edited generic segment \" +\r\n        stringId +\r\n        \" in \" +\r\n        category.name +\r\n        \": \" +\r\n        category.strings[index].text\r\n    );\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Game-specific events\r\n   *\r\n   */\r\n\r\n  handleAddGame = () => {\r\n    const games = [...this.state.games];\r\n    var newGameId = this.findFirstUniqueID();\r\n    var game = {\r\n      id: newGameId,\r\n      name: \"New Game\",\r\n      segments: []\r\n    };\r\n    // Make sure new game is inheriting generics\r\n    var usedIDs = [newGameId];\r\n    this.state.generics.forEach(cat => {\r\n      var gameCatId = this.findFirstUniqueID(usedIDs);\r\n      usedIDs.push(gameCatId);\r\n      game.segments.push({\r\n        id: gameCatId,\r\n        isInherited: true,\r\n        inheritedID: cat.id,\r\n        name: cat.name,\r\n        strings: []\r\n      });\r\n    });\r\n    games.push(game);\r\n    this.setState({ games });\r\n    this.setState({ activeGameId: newGameId });\r\n    this.setState({ activeGameCategoryId: usedIDs[2] });\r\n    return newGameId;\r\n  };\r\n\r\n  handleEditGame = (gameId, event) => {\r\n    const gameIndex = this.state.games.findIndex(g => {\r\n      return g.id === gameId;\r\n    });\r\n    let games = this.state.games;\r\n    games[gameIndex].name = event.target.value;\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleDeleteGame = gameId => {\r\n    const games = this.state.games.filter(g => g.id !== gameId);\r\n    this.setState({ activeGameId: games[0].id });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleSwitchGame = newGameId => {\r\n    const game = this.state.games.find(g => {\r\n      return g.id === newGameId;\r\n    });\r\n    this.setState({ activeGameId: newGameId });\r\n    this.setState({ activeGameCategoryId: game.segments[0].id });\r\n  };\r\n\r\n  handleAddGameCategory = gameId => {\r\n    const games = [...this.state.games];\r\n    const game = {\r\n      ...games.find(g => {\r\n        return g.id === gameId;\r\n      })\r\n    };\r\n    var newCategoryId = this.findFirstUniqueID();\r\n    var newSegmentId = this.findFirstUniqueID([newCategoryId]);\r\n    game.segments.push({\r\n      id: newCategoryId,\r\n      name: \"New Category\",\r\n      strings: [{ id: newSegmentId, text: \"\" }]\r\n    });\r\n    this.setState({ games });\r\n    this.setState({ activeGameCategoryId: newCategoryId });\r\n    return newCategoryId;\r\n  };\r\n\r\n  handleEditGameCategory = (gameId, categoryId, event) => {\r\n    const games = [...this.state.games];\r\n    const gameIndex = games.findIndex(g => {\r\n      return g.id === gameId;\r\n    });\r\n    const categoryIndex = games[gameIndex].segments.findIndex(c => {\r\n      return c.id === categoryId;\r\n    });\r\n    games[gameIndex].segments[categoryIndex].name = event.target.value;\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleDeleteGameCategory = (gameId, categoryId) => {\r\n    const games = [...this.state.games];\r\n    let game = games.find(g => {\r\n      return g.id === gameId;\r\n    });\r\n    const categories = game.segments.filter(\r\n      c => c.id !== categoryId || c.isInherited\r\n    );\r\n    game.segments = categories;\r\n    this.setState({ activeGameCategoryId: categories[0].id });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleSwitchGameCategory = newCategoryId => {\r\n    this.setState({ activeGameCategoryId: newCategoryId });\r\n  };\r\n\r\n  handleAddGameSegment = (gameId, categoryId) => {\r\n    if (gameId === -1 || categoryId === -1) return;\r\n    const games = [...this.state.games];\r\n    const game = {\r\n      ...games.find(g => {\r\n        return g.id === gameId;\r\n      })\r\n    };\r\n    const category = {\r\n      ...game.segments.find(c => {\r\n        return c.id === categoryId;\r\n      })\r\n    };\r\n    category.strings.push({\r\n      id: this.findFirstUniqueID(),\r\n      text: \"\"\r\n    });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleDeleteGameSegment = (gameId, categoryId, segmentId) => {\r\n    const games = [...this.state.games];\r\n    const game = {\r\n      ...games.find(g => {\r\n        return g.id === gameId;\r\n      })\r\n    };\r\n    const categoryIndex = game.segments.findIndex(c => {\r\n      return c.id === categoryId;\r\n    });\r\n    const newStrings = game.segments[categoryIndex].strings.filter(\r\n      s => s.id !== segmentId\r\n    );\r\n    game.segments[categoryIndex].strings = newStrings;\r\n    this.setState({ games });\r\n  };\r\n\r\n  // Updates a segment from the generic list whenever its input field is changed\r\n  handleEditGameSegment = (gameId, categoryId, stringId, event) => {\r\n    const games = [...this.state.games];\r\n    const game = {\r\n      ...games.find(g => {\r\n        return g.id === gameId;\r\n      })\r\n    };\r\n    const category = {\r\n      ...game.segments.find(c => {\r\n        return c.id === categoryId;\r\n      })\r\n    };\r\n    const index = category.strings.findIndex(s => {\r\n      return s.id === stringId;\r\n    });\r\n    category.strings[index].text = event.target.value;\r\n    this.setState({ games });\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Render\r\n   *\r\n   */\r\n\r\n  render() {\r\n    return (\r\n      // Sentence templates (list of strings with 1 entry field)\r\n\r\n      // Generic segments (as above but wrapped in a frame for segment type)\r\n\r\n      // Game-specific segments (as above but wrapped in another frame for game type)\r\n      <React.Fragment>\r\n        <button\r\n          onClick={() => this.handleSave()}\r\n          className=\"btn btn-primary btn-sm m 2\"\r\n        >\r\n          Save\r\n        </button>\r\n        <button\r\n          onClick={() => this.handleGenerate()}\r\n          className=\"btn btn-primary btn-sm m 2\"\r\n        >\r\n          Generate sentences\r\n        </button>\r\n        {this.state.generatedSentences.map(s => {\r\n          return <p key={s.id}>{s.text}</p>;\r\n        })}\r\n        <h1>Sentence Templates</h1>\r\n        <EditableStringList\r\n          strings={this.state.sentences}\r\n          onAddButton={this.handleAddSentence}\r\n          onStringChange={this.handleSentenceChange}\r\n          onStringDelete={this.handleSentenceDelete}\r\n        />\r\n        <h1>Generic Segments</h1>\r\n        <SegmentList\r\n          activeId={this.state.activeGenericCategoryId}\r\n          categories={this.state.generics}\r\n          onAddCategory={this.handleAddGenericCategory}\r\n          onEditCategory={this.handleEditGenericCategory}\r\n          onDeleteCategory={this.handleDeleteGenericCategory}\r\n          onSwitchCategory={this.handleSwitchGenericCategory}\r\n          onAddSegment={this.handleAddGenericSegment}\r\n          onEditSegment={this.handleEditGenericSegment}\r\n          onDeleteSegment={this.handleDeleteGenericSegment}\r\n        />\r\n        <h1>Game-Specific Segments</h1>\r\n        <GameList\r\n          activeGameId={this.state.activeGameId}\r\n          activeCategoryId={this.state.activeGameCategoryId}\r\n          games={this.state.games}\r\n          generics={this.state.generics}\r\n          onAddGame={this.handleAddGame}\r\n          onEditGame={this.handleEditGame}\r\n          onDeleteGame={this.handleDeleteGame}\r\n          onSwitchGame={this.handleSwitchGame}\r\n          onAddCategory={this.handleAddGameCategory}\r\n          onEditCategory={this.handleEditGameCategory}\r\n          onDeleteCategory={this.handleDeleteGameCategory}\r\n          onSwitchCategory={this.handleSwitchGameCategory}\r\n          onAddSegment={this.handleAddGameSegment}\r\n          onEditSegment={this.handleEditGameSegment}\r\n          onDeleteSegment={this.handleDeleteGameSegment}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  findFirstUniqueID = reservedIDs => {\r\n    // Create a list of objects to iterate over\r\n    var objects = [];\r\n    if (reservedIDs != null) {\r\n      reservedIDs.forEach(s => {\r\n        objects.push(s);\r\n      });\r\n    }\r\n    this.state.sentences.forEach(s => {\r\n      objects.push(s.id);\r\n    });\r\n    this.state.generics.forEach(g => {\r\n      objects.push(g.id);\r\n      g.strings.forEach(t => {\r\n        objects.push(t.id);\r\n      });\r\n    });\r\n    this.state.games.forEach(g => {\r\n      objects.push(g.id);\r\n      g.segments.forEach(s => {\r\n        objects.push(s.id);\r\n        s.strings.forEach(t => {\r\n          objects.push(t.id);\r\n        });\r\n      });\r\n    });\r\n\r\n    // Find first free ID\r\n    var id = 0;\r\n    while (true) {\r\n      var startId = id;\r\n      for (var i = 0; i < objects.length; ++i) {\r\n        if (objects[i] === id) {\r\n          id++;\r\n        }\r\n      }\r\n      if (startId === id) {\r\n        return id;\r\n      }\r\n    }\r\n  };\r\n\r\n  /*\r\n  // Create a list of relevant categories from the generics and active game\r\n  CreateCategoryList(generics, game) {\r\n    var categoryList = [];\r\n    generics.map(g => {\r\n      categoryList.push(g.name);\r\n    });\r\n    // Game will be null when creating just the generics list\r\n    if (game !== null) {\r\n      game.map(g => {\r\n        categoryList.push(g.name);\r\n      });\r\n    }\r\n    return categoryList;\r\n  }*/\r\n}\r\n\r\nexport default GameChallengeApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport GameChallengeApp from \"./components/gameChallengeApp\";\r\n\r\nReactDOM.render(<GameChallengeApp />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}