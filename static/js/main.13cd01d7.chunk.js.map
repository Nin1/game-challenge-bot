{"version":3,"sources":["components/editableStringList.jsx","components/segmentList.jsx","components/gameList.jsx","components/gameChallengeApp.jsx","index.js"],"names":["EditableStringList","s","onStringChange","onStringDelete","key","id","InputGroup","className","Form","Control","defaultValue","text","aria-label","aria-describedby","onChange","e","Append","Button","variant","onClick","strings","Fragment","map","renderExistingString","this","props","onAddButton","renderStrings","Component","SegmentList","state","handleDeleteCategory","activeId","categories","onDeleteCategory","length","find","c","isInherited","activeCategoryName","activeCategoryId","onEditCategory","onSwitchCategory","categoryIsInherited","formControl","value","readOnly","DropdownButton","title","Dropdown","Item","href","name","onAddSegment","onEditSegment","onDeleteSegment","onAddCategory","activeCategory","activeCategoryStrings","renderDropdown","sId","GameList","games","activeGameName","activeGameId","onEditGame","onSwitchGame","g","onAddGame","onDeleteGame","activeGame","actualGameId","actualGameName","actualGameCategories","segments","cId","GameChallengeApp","activeGenericCategoryId","activeGameCategoryId","sentences","generics","inheritAllGenericsForAllGames","usedIDs","forEach","cat","game","alreadyExists","gCat","inheritedID","gameCatId","findFirstUniqueID","push","setState","handleSave","firebase","ref","set","handleAddSentence","console","log","handleSentenceChange","stringId","event","index","findIndex","target","handleSentenceDelete","filter","handleAddGenericCategory","newCategoryId","newSegmentId","handleEditGenericCategory","categoryId","categoryIndex","handleDeleteGenericCategory","handleSwitchGenericCategory","handleAddGenericSegment","handleDeleteGenericSegment","segmentId","newStrings","handleEditGenericSegment","category","handleAddGame","newGameId","handleEditGame","gameId","gameIndex","handleDeleteGame","handleSwitchGame","handleAddGameCategory","handleEditGameCategory","handleDeleteGameCategory","handleSwitchGameCategory","handleAddGameSegment","handleDeleteGameSegment","handleEditGameSegment","reservedIDs","objects","t","startId","i","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","rootRef","child","once","then","snap","val","forceUpdate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13cd01d7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\n\r\n// Displays a list of strings.\r\n// Each string has an 'x' button to remove it.\r\n// An ADD button at the bottom allows you to add to the list.\r\nclass EditableStringList extends Component {\r\n  renderExistingString(s, onStringChange, onStringDelete) {\r\n    return (\r\n      <div key={s.id}>\r\n        <InputGroup className=\"mb-3\">\r\n          <Form.Control\r\n            defaultValue={s.text}\r\n            aria-label=\"String\"\r\n            aria-describedby=\"basic-addon2\"\r\n            onChange={e => onStringChange(s.id, e)}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button\r\n              variant=\"outline-secondary\"\r\n              onClick={e => onStringDelete(s.id)}\r\n            >\r\n              X\r\n            </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderStrings(strings, onStringChange, onStringDelete) {\r\n    if (strings != null) {\r\n      return (\r\n        <React.Fragment>\r\n          {strings.map(s => {\r\n            return this.renderExistingString(s, onStringChange, onStringDelete);\r\n          })}\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { strings, onAddButton, onStringChange, onStringDelete } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        {this.renderStrings(strings, onStringChange, onStringDelete)}\r\n        <br />\r\n        <button\r\n          onClick={() => onAddButton()}\r\n          className=\"btn btn-danger btn-sm m 2\"\r\n        >\r\n          Add\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableStringList;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport EditableStringList from \"./editableStringList\";\r\n\r\nclass SegmentList extends Component {\r\n  state = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  /*\r\n  handleAddCategory = onAddCategory => {\r\n    this.setState({ activeCategoryId: onAddCategory() });\r\n  };\r\n\r\n  handleSwitchCategory = newCategoryId => {\r\n    this.setState({ activeCategoryId: newCategoryId });\r\n  };*/\r\n\r\n  handleDeleteCategory = (activeId, categories, onDeleteCategory) => {\r\n    // Can't delete last category\r\n    if (categories.length === 1) return;\r\n    // Can't delete inherited category\r\n    if (\r\n      categories.find(c => {\r\n        return c.id === activeId;\r\n      }).isInherited\r\n    )\r\n      return;\r\n    onDeleteCategory(activeId);\r\n  };\r\n\r\n  renderDropdown(\r\n    categories,\r\n    activeCategoryName,\r\n    activeCategoryId,\r\n    onEditCategory,\r\n    onSwitchCategory,\r\n    categoryIsInherited\r\n  ) {\r\n    var formControl = (\r\n      <Form.Control\r\n        value={activeCategoryName}\r\n        aria-label=\"String\"\r\n        aria-describedby=\"basic-addon2\"\r\n        onChange={e => onEditCategory(activeCategoryId, e)}\r\n      />\r\n    );\r\n    if (categoryIsInherited) {\r\n      formControl = (\r\n        <Form.Control\r\n          readOnly\r\n          value={\"(Generic) \" + activeCategoryName}\r\n          aria-label=\"String\"\r\n          aria-describedby=\"basic-addon2\"\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <DropdownButton id=\"dropdown-basic-button\" title={activeCategoryName}>\r\n        {formControl}\r\n        {categories.map(c => {\r\n          return (\r\n            <Dropdown.Item\r\n              href=\"#/action-1\"\r\n              key={c.id}\r\n              onClick={() => onSwitchCategory(c.id)}\r\n            >\r\n              {c.isInherited ? \"(Generic) \" + c.name : c.name}\r\n            </Dropdown.Item>\r\n          );\r\n        })}\r\n      </DropdownButton>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      activeId,\r\n      categories,\r\n      onAddSegment,\r\n      onEditSegment,\r\n      onDeleteSegment,\r\n      onAddCategory,\r\n      onEditCategory,\r\n      onDeleteCategory,\r\n      onSwitchCategory\r\n    } = this.props;\r\n    // Dropdown of categories\r\n    // Add category button\r\n    // Remove category button\r\n    // Category edit field name (readOnly if inherited from generics)\r\n    // Editable string list\r\n    var activeCategory = categories.find(c => {\r\n      return c.id === activeId;\r\n    });\r\n    // Need to be able to handle null case\r\n    var activeCategoryId = -1;\r\n    var activeCategoryName = \"<Missing>\";\r\n    var activeCategoryStrings = [];\r\n    var categoryIsInherited = true;\r\n    if (activeCategory != null) {\r\n      activeCategoryId = activeCategory.id;\r\n      activeCategoryName = activeCategory.name;\r\n      activeCategoryStrings = activeCategory.strings;\r\n      categoryIsInherited = activeCategory.isInherited;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {this.renderDropdown(\r\n          categories,\r\n          activeCategoryName,\r\n          activeCategoryId,\r\n          onEditCategory,\r\n          onSwitchCategory,\r\n          categoryIsInherited\r\n        )}\r\n        <button\r\n          onClick={() => onAddCategory()}\r\n          className=\"btn btn-primary btn-sm m 2\"\r\n        >\r\n          Add Category\r\n        </button>\r\n        <button\r\n          onClick={() => onDeleteCategory(activeId, categories)}\r\n          className=\"btn btn-danger btn-sm m 2\"\r\n        >\r\n          Delete Category\r\n        </button>\r\n        <EditableStringList\r\n          strings={activeCategoryStrings}\r\n          onAddButton={() => onAddSegment(activeCategoryId)}\r\n          onStringChange={(sId, e) => onEditSegment(activeCategoryId, sId, e)}\r\n          onStringDelete={sId => onDeleteSegment(activeCategoryId, sId)}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SegmentList;\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport SegmentList from \"./segmentList\";\r\n\r\nclass GameList extends Component {\r\n  state = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  /*\r\n  handleAddGame = onAddGame => {\r\n    this.setState({ activeGameId: onAddGame() });\r\n  };\r\n\r\n  handleSwitchGame = newGameId => {\r\n    this.setState({ activeGameId: newGameId });\r\n  };\r\n\r\n  handleDeleteGame = (gameId, games, onDeleteGame) => {\r\n    // Can't delete last game\r\n    if (games.length === 1) return;\r\n    // Update activeCategoryId\r\n    //let activeGame = games.find(g => {\r\n    //  return g.id !== this.state.activeGameId;\r\n    //});\r\n    //this.setState({ activeGameId: activeGame.id });\r\n    // Delete\r\n    onDeleteGame(gameId);\r\n  };\r\n\r\n  handleDeleteCategory = (gameId, categoryId, onDeleteCategory) => {\r\n    onDeleteCategory(gameId, categoryId);\r\n  };\r\n*/\r\n  renderDropdown(\r\n    games,\r\n    activeGameName,\r\n    activeGameId,\r\n    onEditGame,\r\n    onSwitchGame\r\n  ) {\r\n    return (\r\n      <DropdownButton id=\"dropdown-basic-button\" title={activeGameName}>\r\n        <Form.Control\r\n          value={activeGameName}\r\n          aria-label=\"String\"\r\n          aria-describedby=\"basic-addon2\"\r\n          onChange={e => onEditGame(activeGameId, e)}\r\n        />\r\n        {games.map(g => {\r\n          return (\r\n            <Dropdown.Item\r\n              href=\"#/action-1\"\r\n              key={g.id}\r\n              onClick={() => onSwitchGame(g.id)}\r\n            >\r\n              {g.name}\r\n            </Dropdown.Item>\r\n          );\r\n        })}\r\n      </DropdownButton>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      activeGameId,\r\n      activeCategoryId,\r\n      games,\r\n      onAddSegment,\r\n      onEditSegment,\r\n      onDeleteSegment,\r\n      onAddCategory,\r\n      onEditCategory,\r\n      onDeleteCategory,\r\n      onSwitchCategory,\r\n      onAddGame,\r\n      onEditGame,\r\n      onDeleteGame,\r\n      onSwitchGame\r\n    } = this.props;\r\n\r\n    var activeGame = games.find(g => {\r\n      return g.id === activeGameId;\r\n    });\r\n    // Need to be able to handle null case\r\n    var actualGameId = -1;\r\n    var actualGameName = \"<Missing>\";\r\n    var actualGameCategories = [];\r\n    if (activeGame != null) {\r\n      actualGameId = activeGame.id;\r\n      actualGameName = activeGame.name;\r\n      actualGameCategories = activeGame.segments;\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {this.renderDropdown(\r\n          games,\r\n          actualGameName,\r\n          actualGameId,\r\n          onEditGame,\r\n          onSwitchGame\r\n        )}\r\n        <button\r\n          onClick={() => onAddGame()}\r\n          className=\"btn btn-primary btn-sm m 2\"\r\n        >\r\n          Add Game\r\n        </button>\r\n        <button\r\n          onClick={() => onDeleteGame(actualGameId)}\r\n          className=\"btn btn-danger btn-sm m 2\"\r\n        >\r\n          Delete Game\r\n        </button>\r\n        <SegmentList\r\n          activeId={activeCategoryId}\r\n          categories={actualGameCategories}\r\n          onAddCategory={cId => onAddCategory(actualGameId, cId)}\r\n          onEditCategory={(cId, e) => onEditCategory(actualGameId, cId, e)}\r\n          onDeleteCategory={cId => onDeleteCategory(actualGameId, cId)}\r\n          onSwitchCategory={cId => onSwitchCategory(cId)}\r\n          onAddSegment={cId => onAddSegment(actualGameId, cId)}\r\n          onEditSegment={(cId, sId, e) =>\r\n            onEditSegment(actualGameId, cId, sId, e)\r\n          }\r\n          onDeleteSegment={(cId, sId) =>\r\n            onDeleteSegment(actualGameId, cId, sId)\r\n          }\r\n          key={actualGameId}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameList;\r\n","import React, { Component } from \"react\";\r\nimport * as firebase from \"firebase\";\r\nimport EditableStringList from \"./editableStringList\";\r\nimport SegmentList from \"./segmentList\";\r\nimport GameList from \"./gameList\";\r\n\r\nclass GameChallengeApp extends Component {\r\n  state = {\r\n    activeGenericCategoryId: 0,\r\n    activeGameId: 0,\r\n    activeGameCategoryId: 0,\r\n\r\n    sentences: [],\r\n    generics: [],\r\n    games: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Load from database\r\n    const firebaseConfig = {\r\n      apiKey: \"AIzaSyBOzIDUIUFpvYf-pZZFY7I9Ucb4nXEKyC4\",\r\n      authDomain: \"game-challenge-bot.firebaseapp.com\",\r\n      databaseURL: \"https://game-challenge-bot.firebaseio.com\",\r\n      projectId: \"game-challenge-bot\",\r\n      storageBucket: \"game-challenge-bot.appspot.com\",\r\n      messagingSenderId: \"1047706421956\",\r\n      appId: \"1:1047706421956:web:26b78b0b0b9630ba6a1791\",\r\n      measurementId: \"G-LX0HVNR863\"\r\n    };\r\n    firebase.initializeApp(firebaseConfig);\r\n    const rootRef = firebase\r\n      .database()\r\n      .ref()\r\n      .child(\"/\");\r\n    const sentenceRef = rootRef.child(\"sentences\");\r\n    sentenceRef.once(\"value\").then(snap => {\r\n      this.setState({ sentences: snap.val() });\r\n      this.forceUpdate();\r\n    });\r\n    const genericsRef = rootRef.child(\"generics\");\r\n    genericsRef.once(\"value\").then(snap => {\r\n      var generics = snap.val();\r\n      generics.forEach(cat => {\r\n        if (cat.strings == null) {\r\n          cat.strings = [];\r\n        }\r\n      });\r\n      this.setState({ generics });\r\n      this.setState({ activeGenericCategoryId: this.state.generics[0].id });\r\n      this.inheritAllGenericsForAllGames();\r\n      this.forceUpdate();\r\n    });\r\n    const gamesRef = rootRef.child(\"games\");\r\n    gamesRef.once(\"value\").then(snap => {\r\n      var games = snap.val();\r\n      games.forEach(game => {\r\n        if (game.segments == null) {\r\n          game.segments = [];\r\n        }\r\n        game.segments.forEach(cat => {\r\n          if (cat.strings == null) {\r\n            cat.strings = [];\r\n          }\r\n        });\r\n      });\r\n      this.setState({ games });\r\n      this.setState({ activeGameId: this.state.games[0].id });\r\n      this.setState({\r\n        activeGameCategoryId: this.state.games[0].segments[0].id\r\n      });\r\n      this.inheritAllGenericsForAllGames();\r\n      this.forceUpdate();\r\n    });\r\n  }\r\n\r\n  inheritAllGenericsForAllGames = () => {\r\n    const games = [...this.state.games];\r\n    // Make sure each game is inheriting generics\r\n    var usedIDs = [];\r\n    this.state.generics.forEach(cat => {\r\n      games.forEach(game => {\r\n        var alreadyExists = false;\r\n        game.segments.forEach(gCat => {\r\n          if (cat.name == gCat.name) {\r\n            gCat.isInherited = true;\r\n            gCat.inheritedID = cat.id;\r\n            alreadyExists = true;\r\n          }\r\n        });\r\n        if (!alreadyExists) {\r\n          var gameCatId = this.findFirstUniqueID(usedIDs);\r\n          usedIDs.push(gameCatId);\r\n          game.segments.push({\r\n            id: gameCatId,\r\n            isInherited: true,\r\n            inheritedID: cat.id,\r\n            name: cat.name,\r\n            strings: []\r\n          });\r\n        }\r\n      });\r\n    });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleSave = () => {\r\n    firebase\r\n      .database()\r\n      .ref(\"sentences/\")\r\n      .set(this.state.sentences);\r\n    firebase\r\n      .database()\r\n      .ref(\"generics/\")\r\n      .set(this.state.generics);\r\n    firebase\r\n      .database()\r\n      .ref(\"games/\")\r\n      .set(this.state.games);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Sentence events\r\n   *\r\n   */\r\n\r\n  // Adds a new empty sentence to the list of sentences\r\n  handleAddSentence = () => {\r\n    console.log(\"Adding new sentence\");\r\n    // Create copy of sentences array for local modification\r\n    const sentences = [...this.state.sentences];\r\n    sentences.push({ id: this.findFirstUniqueID(), text: \"\" });\r\n    // Update state\r\n    this.setState({ sentences });\r\n  };\r\n\r\n  // Updates a sentence whenever its input field is changed\r\n  handleSentenceChange = (stringId, event) => {\r\n    const sentences = [...this.state.sentences];\r\n    const index = sentences.findIndex(s => {\r\n      return s.id === stringId;\r\n    });\r\n    sentences[index].text = event.target.value;\r\n    this.setState({ sentences });\r\n    console.log(\"Edited sentence \" + stringId + \": \" + sentences[index].text);\r\n  };\r\n\r\n  // Deletes a sentence whenever its delete button is pressed\r\n  handleSentenceDelete = stringId => {\r\n    console.log(\"Delete called on sentence \" + stringId);\r\n    const sentences = this.state.sentences.filter(s => s.id !== stringId);\r\n    this.setState({ sentences });\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Generics events\r\n   *\r\n   */\r\n\r\n  handleAddGenericCategory = () => {\r\n    const generics = [...this.state.generics];\r\n    var newCategoryId = this.findFirstUniqueID();\r\n    var newSegmentId = this.findFirstUniqueID([newCategoryId]);\r\n    generics.push({\r\n      id: newCategoryId,\r\n      name: \"New Category\",\r\n      strings: [{ id: newSegmentId, text: \"\" }]\r\n    });\r\n    this.setState({ generics });\r\n    this.setState({ activeGenericCategoryId: newCategoryId });\r\n    // Add this category to every game\r\n    const games = [...this.state.games];\r\n    var usedIDs = [newCategoryId, newSegmentId];\r\n    games.forEach(game => {\r\n      var gameCatId = this.findFirstUniqueID(usedIDs);\r\n      usedIDs.push(gameCatId);\r\n      game.segments.push({\r\n        id: gameCatId,\r\n        isInherited: true,\r\n        inheritedID: newCategoryId,\r\n        name: \"New Category\",\r\n        strings: []\r\n      });\r\n    });\r\n    this.setState({ games });\r\n    // Return category ID\r\n    return newCategoryId;\r\n  };\r\n\r\n  handleEditGenericCategory = (categoryId, event) => {\r\n    const categoryIndex = this.state.generics.findIndex(c => {\r\n      return c.id === categoryId;\r\n    });\r\n    let generics = this.state.generics;\r\n    generics[categoryIndex].name = event.target.value;\r\n    this.setState({ generics });\r\n    // Update name for all games too\r\n    const games = [...this.state.games];\r\n    games.forEach(game => {\r\n      game.segments.find(c => {\r\n        return c.isInherited && c.inheritedID === categoryId;\r\n      }).name = event.target.value;\r\n    });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleDeleteGenericCategory = categoryId => {\r\n    const generics = this.state.generics.filter(c => c.id !== categoryId);\r\n    this.setState({ activeGenericCategoryId: generics[0].id });\r\n    this.setState({ generics });\r\n    // Delete this category from any games, unless they have custom segments (in which case, set uninherited)\r\n    var games = [...this.state.games];\r\n    games.forEach(game => {\r\n      // Filter out matching empty category\r\n      const categories = game.segments.filter(\r\n        c =>\r\n          !c.isInherited || c.inheritedID !== categoryId || c.strings.length > 0\r\n      );\r\n      game.segments = categories;\r\n      game.segments.forEach(c => {\r\n        // Un-inherit any matching category that has custom strings\r\n        if (\r\n          c.isInherited &&\r\n          c.inheritedID === categoryId &&\r\n          c.strings.length > 0\r\n        ) {\r\n          c.isInherited = false;\r\n          c.inheritedID = -1;\r\n        }\r\n      });\r\n    });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleSwitchGenericCategory = newCategoryId => {\r\n    this.setState({ activeGenericCategoryId: newCategoryId });\r\n  };\r\n\r\n  handleAddGenericSegment = categoryId => {\r\n    const generics = [...this.state.generics];\r\n    const category = {\r\n      ...generics.find(c => {\r\n        return c.id === categoryId;\r\n      })\r\n    };\r\n    category.strings.push({\r\n      id: this.findFirstUniqueID(),\r\n      text: \"\"\r\n    });\r\n    this.setState({ generics });\r\n  };\r\n\r\n  handleDeleteGenericSegment = (categoryId, segmentId) => {\r\n    const categoryIndex = this.state.generics.findIndex(c => {\r\n      return c.id === categoryId;\r\n    });\r\n    const newStrings = this.state.generics[categoryIndex].strings.filter(\r\n      s => s.id !== segmentId\r\n    );\r\n    let generics = this.state.generics;\r\n    generics[categoryIndex].strings = newStrings;\r\n    this.setState({ generics });\r\n  };\r\n\r\n  // Updates a segment from the generic list whenever its input field is changed\r\n  handleEditGenericSegment = (categoryId, stringId, event) => {\r\n    const generics = [...this.state.generics];\r\n    const category = {\r\n      ...generics.find(c => {\r\n        return c.id === categoryId;\r\n      })\r\n    };\r\n    const index = category.strings.findIndex(s => {\r\n      return s.id === stringId;\r\n    });\r\n    category.strings[index].text = event.target.value;\r\n    this.setState({ generics });\r\n    console.log(\r\n      \"Edited generic segment \" +\r\n        stringId +\r\n        \" in \" +\r\n        category.name +\r\n        \": \" +\r\n        category.strings[index].text\r\n    );\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Game-specific events\r\n   *\r\n   */\r\n\r\n  handleAddGame = () => {\r\n    const games = [...this.state.games];\r\n    var newGameId = this.findFirstUniqueID();\r\n    var game = {\r\n      id: newGameId,\r\n      name: \"New Game\",\r\n      segments: []\r\n    };\r\n    // Make sure new game is inheriting generics\r\n    var usedIDs = [newGameId];\r\n    this.state.generics.forEach(cat => {\r\n      var gameCatId = this.findFirstUniqueID(usedIDs);\r\n      usedIDs.push(gameCatId);\r\n      game.segments.push({\r\n        id: gameCatId,\r\n        isInherited: true,\r\n        inheritedID: cat.id,\r\n        name: cat.name,\r\n        strings: []\r\n      });\r\n    });\r\n    games.push(game);\r\n    this.setState({ games });\r\n    this.setState({ activeGameId: newGameId });\r\n    this.setState({ activeGameCategoryId: usedIDs[2] });\r\n    return newGameId;\r\n  };\r\n\r\n  handleEditGame = (gameId, event) => {\r\n    const gameIndex = this.state.games.findIndex(g => {\r\n      return g.id === gameId;\r\n    });\r\n    let games = this.state.games;\r\n    games[gameIndex].name = event.target.value;\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleDeleteGame = gameId => {\r\n    const games = this.state.games.filter(g => g.id !== gameId);\r\n    this.setState({ activeGameId: games[0].id });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleSwitchGame = newGameId => {\r\n    const game = this.state.games.find(g => {\r\n      return g.id === newGameId;\r\n    });\r\n    this.setState({ activeGameId: newGameId });\r\n    this.setState({ activeGameCategoryId: game.segments[0].id });\r\n  };\r\n\r\n  handleAddGameCategory = gameId => {\r\n    const games = [...this.state.games];\r\n    const game = {\r\n      ...games.find(g => {\r\n        return g.id === gameId;\r\n      })\r\n    };\r\n    var newCategoryId = this.findFirstUniqueID();\r\n    var newSegmentId = this.findFirstUniqueID([newCategoryId]);\r\n    game.segments.push({\r\n      id: newCategoryId,\r\n      name: \"New Category\",\r\n      strings: [{ id: newSegmentId, text: \"\" }]\r\n    });\r\n    this.setState({ games });\r\n    this.setState({ activeGameCategoryId: newCategoryId });\r\n    return newCategoryId;\r\n  };\r\n\r\n  handleEditGameCategory = (gameId, categoryId, event) => {\r\n    const games = [...this.state.games];\r\n    const gameIndex = games.findIndex(g => {\r\n      return g.id === gameId;\r\n    });\r\n    const categoryIndex = games[gameIndex].segments.findIndex(c => {\r\n      return c.id === categoryId;\r\n    });\r\n    games[gameIndex].segments[categoryIndex].name = event.target.value;\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleDeleteGameCategory = (gameId, categoryId) => {\r\n    const games = [...this.state.games];\r\n    let game = games.find(g => {\r\n      return g.id === gameId;\r\n    });\r\n    const categories = game.segments.filter(\r\n      c => c.id !== categoryId || c.isInherited\r\n    );\r\n    game.segments = categories;\r\n    this.setState({ activeGameCategoryId: categories[0].id });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleSwitchGameCategory = newCategoryId => {\r\n    this.setState({ activeGameCategoryId: newCategoryId });\r\n  };\r\n\r\n  handleAddGameSegment = (gameId, categoryId) => {\r\n    if (gameId === -1 || categoryId === -1) return;\r\n    const games = [...this.state.games];\r\n    const game = {\r\n      ...games.find(g => {\r\n        return g.id === gameId;\r\n      })\r\n    };\r\n    const category = {\r\n      ...game.segments.find(c => {\r\n        return c.id === categoryId;\r\n      })\r\n    };\r\n    category.strings.push({\r\n      id: this.findFirstUniqueID(),\r\n      text: \"\"\r\n    });\r\n    this.setState({ games });\r\n  };\r\n\r\n  handleDeleteGameSegment = (gameId, categoryId, segmentId) => {\r\n    const games = [...this.state.games];\r\n    const game = {\r\n      ...games.find(g => {\r\n        return g.id === gameId;\r\n      })\r\n    };\r\n    const categoryIndex = game.segments.findIndex(c => {\r\n      return c.id === categoryId;\r\n    });\r\n    const newStrings = game.segments[categoryIndex].strings.filter(\r\n      s => s.id !== segmentId\r\n    );\r\n    game.segments[categoryIndex].strings = newStrings;\r\n    this.setState({ games });\r\n  };\r\n\r\n  // Updates a segment from the generic list whenever its input field is changed\r\n  handleEditGameSegment = (gameId, categoryId, stringId, event) => {\r\n    const games = [...this.state.games];\r\n    const game = {\r\n      ...games.find(g => {\r\n        return g.id === gameId;\r\n      })\r\n    };\r\n    const category = {\r\n      ...game.segments.find(c => {\r\n        return c.id === categoryId;\r\n      })\r\n    };\r\n    const index = category.strings.findIndex(s => {\r\n      return s.id === stringId;\r\n    });\r\n    category.strings[index].text = event.target.value;\r\n    this.setState({ games });\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Render\r\n   *\r\n   */\r\n\r\n  render() {\r\n    return (\r\n      // Sentence templates (list of strings with 1 entry field)\r\n\r\n      // Generic segments (as above but wrapped in a frame for segment type)\r\n\r\n      // Game-specific segments (as above but wrapped in another frame for game type)\r\n      <React.Fragment>\r\n        <button\r\n          onClick={() => this.handleSave()}\r\n          className=\"btn btn-primary btn-sm m 2\"\r\n        >\r\n          Save\r\n        </button>\r\n        <h1>Sentence Templates</h1>\r\n        <EditableStringList\r\n          strings={this.state.sentences}\r\n          onAddButton={this.handleAddSentence}\r\n          onStringChange={this.handleSentenceChange}\r\n          onStringDelete={this.handleSentenceDelete}\r\n        />\r\n        <h1>Generic Segments</h1>\r\n        <SegmentList\r\n          activeId={this.state.activeGenericCategoryId}\r\n          categories={this.state.generics}\r\n          onAddCategory={this.handleAddGenericCategory}\r\n          onEditCategory={this.handleEditGenericCategory}\r\n          onDeleteCategory={this.handleDeleteGenericCategory}\r\n          onSwitchCategory={this.handleSwitchGenericCategory}\r\n          onAddSegment={this.handleAddGenericSegment}\r\n          onEditSegment={this.handleEditGenericSegment}\r\n          onDeleteSegment={this.handleDeleteGenericSegment}\r\n        />\r\n        <h1>Game-Specific Segments</h1>\r\n        <GameList\r\n          activeGameId={this.state.activeGameId}\r\n          activeCategoryId={this.state.activeGameCategoryId}\r\n          games={this.state.games}\r\n          generics={this.state.generics}\r\n          onAddGame={this.handleAddGame}\r\n          onEditGame={this.handleEditGame}\r\n          onDeleteGame={this.handleDeleteGame}\r\n          onSwitchGame={this.handleSwitchGame}\r\n          onAddCategory={this.handleAddGameCategory}\r\n          onEditCategory={this.handleEditGameCategory}\r\n          onDeleteCategory={this.handleDeleteGameCategory}\r\n          onSwitchCategory={this.handleSwitchGameCategory}\r\n          onAddSegment={this.handleAddGameSegment}\r\n          onEditSegment={this.handleEditGameSegment}\r\n          onDeleteSegment={this.handleDeleteGameSegment}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  findFirstUniqueID = reservedIDs => {\r\n    // Create a list of objects to iterate over\r\n    var objects = [];\r\n    if (reservedIDs != null) {\r\n      reservedIDs.forEach(s => {\r\n        objects.push(s);\r\n      });\r\n    }\r\n    this.state.sentences.forEach(s => {\r\n      objects.push(s.id);\r\n    });\r\n    this.state.generics.forEach(g => {\r\n      objects.push(g.id);\r\n      g.strings.forEach(t => {\r\n        objects.push(t.id);\r\n      });\r\n    });\r\n    this.state.games.forEach(g => {\r\n      objects.push(g.id);\r\n      g.segments.forEach(s => {\r\n        objects.push(s.id);\r\n        s.strings.forEach(t => {\r\n          objects.push(t.id);\r\n        });\r\n      });\r\n    });\r\n\r\n    // Find first free ID\r\n    var id = 0;\r\n    while (true) {\r\n      var startId = id;\r\n      for (var i = 0; i < objects.length; ++i) {\r\n        if (objects[i] === id) {\r\n          id++;\r\n        }\r\n      }\r\n      if (startId === id) {\r\n        return id;\r\n      }\r\n    }\r\n  };\r\n\r\n  /*\r\n  // Create a list of relevant categories from the generics and active game\r\n  CreateCategoryList(generics, game) {\r\n    var categoryList = [];\r\n    generics.map(g => {\r\n      categoryList.push(g.name);\r\n    });\r\n    // Game will be null when creating just the generics list\r\n    if (game !== null) {\r\n      game.map(g => {\r\n        categoryList.push(g.name);\r\n      });\r\n    }\r\n    return categoryList;\r\n  }*/\r\n}\r\n\r\nexport default GameChallengeApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport GameChallengeApp from \"./components/gameChallengeApp\";\r\n\r\nReactDOM.render(<GameChallengeApp />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}